<!--Этот View нужен, чтобы не засорять Index.cshtml (мы просто подключим к нему это представление)-->
@model FeedViewModel

@{
}


<div class="pages">
    @if (Model.PageNumber > 1) // Если пользователь не на первой странице, то у него появляется кнопка Назад
    {
        <div class="a-wrapper">
            <a asp-action="Index" class="bottom-with-text" asp-controller="Feed" asp-route-category="@Model.Category"
            asp-route-search="@Model.Search" asp-route-pageNumber="@(Model.PageNumber - 1)">&lt;</a>
        </div>
    }

    @foreach (var p in Model.Pages)
    {
        // Заменяем -1 из списка троеточием
        if (p == -1)
        {
            <a>...</a>
        }
        else
        {

            // Если p равно текущему номеру страницы, то переменная activeClass = "active"
            // Иначе activeClass = "". Это нужно, чтобы кнопка с номером текущей страницы подсвечивалась

            string activeClass = p == Model.PageNumber ? "active" : "";

            // Если мы на текущей странице, то делаем ссылку с классом active,
            // Затем меняем цвет кнопки в CSS
            // Пробегаемся по всем номерам страниц и делаем из их номеров ссылки (кнопки)
            <div class="a-wrapper">
                <a class="@activeClass" asp-action="Index" asp-controller="Feed" asp-route-category="@Model.Category"
                asp-route-search="@Model.Search" asp-route-pageNumber="@p">@p</a>
            </div>
        }

    }

    @if (Model.NextPage) //Если на этой странице показаны не последние записи из таблицы
    {
        <div class="a-wrapper">
            <a asp-action="Index" class="bottom-with-text" asp-controller="Feed" asp-route-category="@Model.Category"
           asp-route-search="@Model.Search" asp-route-pageNumber="@(Model.PageNumber + 1)">&gt;</a>
        </div>

    }
</div>