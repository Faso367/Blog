<!--ТУТ ВСЕ ОК-->
@model Post
@{
    ViewBag.Title = Model.Title;
    ViewBag.Description = Model.Description;
    <!--Если поле Tags? означает что оно потенциально = null, а если Tag!= null, то применяем Replace-->
    ViewBag.Keywords = $"{Model.Tags?.Replace(",", " ")} {Model.Category}";
    var base_path = Context.Request.PathBase;
}


<!-- Подключение шрифта roboto --->
<!--
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300&display=swap" rel="stylesheet">
--->
<link href="~/css/Post.css" rel="stylesheet" />

<div class="post">
    <div class="main-image">
        @if (!String.IsNullOrEmpty(Model.Image))
        {
            //var image_path = $"/Image/{Model.Image}";
            var image_path = $"{base_path}/Image/{Model.Image}";
            <img src="@image_path" />
            <span class="title">@Model.Title</span>
        }
    </div>

    <div class="text-section">
        @Html.Raw(Model.Body) <!--Отображаем тело записи из БД под фото-->
    </div>

    @if (User.Identity.IsAuthenticated)
    {
        // Если пользователь авторизовался, то он может создать комментарий
        <div class="comments-section">
            @{

                // Подгружаем MainComment.cshtml
                await Html.RenderPartialAsync("MainComment",
                new CommentViewModel { PostId = Model.Id, MainCommentId = 0 });
            }
            @foreach (var c in Model.MainComments)
            {

                <div class="comment">
                    <label>
                        Comment Author`s name --- @c.Created
                    </label>
                    <div class="comment-text">
                        @*Если длина комментария более 400 символов, тогда выводим только 400, иначе весь коммент*@

                        @{
                            //string str = "";

                            if (c.Message.Length > 400)
                            {
                                foreach (char s in c.Message.Take(400))
                                    @s
                                ;
                                //foreach(char s in c.Message.Skip(400))
                                //{
                                //    str += s;
                                //}
                                <span class="dots" id="dots(@c.Id)">...</span>
                                <span class="moreText" id="moreText(@c.Id)">@foreach (char s in c.Message.Skip(400))
                                        @s
                </span>
                                <br />
                                <span class="readMoreBut" id="readMoreBut(@c.Id)" onclick="ReadMoreOrLess(@c.Id)">Читать далее</span>
                            }
                            else
                            {
                                @c.Message
                                ;
                            }
                        }
                    </div>

                    @functions {
                string DetermineEnding(int number) {
                    string ending = "ответ";
                    string numberStr = number.ToString();

                    List<char> Aending = new List<char>(){ '2', '3', '4' };
                    List<char> OVending = new List<char>(){ '0', '5', '6', '7', '8', '9'};

                            if (Aending.Contains(numberStr[^1])) { ending += "а"; }
                            if (number != 1 && (numberStr.EndsWith("11") || OVending.Contains(numberStr[^1]))) { ending += "ов"; }
                            
                            return ending;
                        }
                    }

                    @if (c.SubComments.Count > 0)
                    {

                        var count = @c.SubComments.Count;
                        //<button class="show-answers-but">@(c.SubComments.Count) ответов</button>
                        <button class="show-answers-but">@count @DetermineEnding(@count)</button>

                        //<button class="show-text-but"><span class="arrow"></span>@(c.SubComments.Count) ответов</button>

                        //<span class="showSubcommentsBut" id="showSubcommentsBut(@c.Id)" onclick="ShowSubcomments(@c.Id)">
                        //@(c.SubComments.Count) ответов
                        //</span>

                        <div class="subcomment">
                            @foreach (var sc in c.SubComments)
                            {
                                <label>
                                    Subcomment Author`s name  --- @sc.Created
                                </label>
                                <p>@sc.Message</p>

                                //@sc.Message
                                //<div class="subcomment-text" id="subcocommentText(@c.Id)">
                                //    @sc.Message --- @sc.Created
                                //</div>
                            }
                        </div>
                    }

                    @*

            @{
            await Html.RenderPartialAsync("MainComment",
            new CommentViewModel { PostId = Model.Id, MainCommentId = c.Id });
            }*@
                </div>
                //<div class="subcomment" style="margin-left: 30px;">
                //    @foreach (var sc in c.SubComments)
                //    {
                //        <p>
                //            @sc.Message --- @sc.Created
                //        </p>
                //    }
                //</div>
            }

        </div>
    }
    else
    {
        <div>
            <a asp-action="Login" asp-controller="Auth">Авторизироваться</a>, чтобы оставить комментарий
        </div>
    }
</div>

<script src="~/js/Post.js"></script>